// Code generated by gorest; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"strconv"
	"strings"
	"time"
)

const handlerNameKey = "handler"

type ParamPlace int

const (
	UndefinedPlace ParamPlace = iota
	InBody
	InCookie
	InFormData
	InHeader
	InPath
	InQuery
)

type ContentType int

const (
	UndefinedContentType ContentType = iota
	AppJSON
	AppXML
	AppFormUrlencoded
	MultipartFormData
	TextPlain
)

type FieldError struct {
	In        ParamPlace
	BaseField string
	Message   string
	Reason    error
}

func NewFieldError(in ParamPlace, f string, msg string, err error) FieldError {
	return FieldError{
		In:        in,
		BaseField: f,
		Message:   msg,
		Reason:    err,
	}
}

func booleanConverter(input []string) (bool, error) {
	if len(input) == 0 {
		return false, fmt.Errorf("got empty value instead of boolean", input)
	}

	if len(input) > 1 {
		return false, fmt.Errorf("got array '%v' instead of boolean", input)
	}

	switch strings.ToLower(input[0]) {
	case "1", "true", "t":
		return true, nil
	case "0", "false", "f":
		return false, nil
	default:
		return false, fmt.Errorf("can't parse '%v' as boolean", input[0])
	}
}

func integerInt64Converter(input []string) (int64, error) {
	if len(input) != 1 {
		return 0, fmt.Errorf("got array '%v' instead of integer", input)
	}

	return strconv.ParseInt(input[0], 10, 64)
}

func integerInt32Converter(input []string) (int32, error) {
	if len(input) > 1 {
		return 0, fmt.Errorf("got array '%v' instead of integer", input)
	}

	v, err := strconv.ParseInt(input[0], 10, 32)
	return int32(v), err
}

func integerConverter(input []string) (int64, error) {
	return integerInt64Converter(input)
}

func numberFloatConverter(input []string) (float64, error) {
	if len(input) != 1 {
		return 0, fmt.Errorf("got array '%v' instead of integer", input)
	}

	return strconv.ParseFloat(input[0], 32)
}

func stringDateConverter(input []string) (time.Time, error) {
	if len(input) != 1 {
		return time.Time{}, fmt.Errorf("got array '%v' instead of string", input)
	}

	return time.Parse("2006-01-02", input[0])
}

func stringDateTimeConverter(input []string) (time.Time, error) {
	return stringDateConverter(input)
}

func stringYyyyMmDdConverter(input []string) (time.Time, error) {
	if len(input) != 1 {
		return time.Time{}, fmt.Errorf("got array '%v' instead of string", input)
	}

	return time.Parse("2006-01-02", input[0])
}

func stringUnixTimeConverter(input []string) (time.Time, error) {
	if len(input) != 1 {
		return time.Time{}, fmt.Errorf("got array '%v' instead of unix-time", input)
	}

	fromDateSec, err := strconv.ParseInt(input[0], 10, 64)
	if err != nil {
		return time.Time{}, err
	}

	return time.Unix(fromDateSec, 0), err
}

func stringEmailConverter(input []string) (string, error) {
	if len(input) != 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	//TODO: write email check

	return input[0], nil
}

func stringBinaryConverter(input []string) ([]byte, error) {
	if len(input) != 1 {
		return []byte{}, fmt.Errorf("got array '%v' instead of string", input)
	}

	return []byte(input[0]), nil
}

func stringConverter(input []string) (string, error) {
	if len(input) != 1 {
		return "", fmt.Errorf("got array '%v' instead of string", input)
	}

	return input[0], nil
}

func ginGetCookie(c *gin.Context, param string) (string, bool) {
	cookie, err := c.Request.Cookie(param)
	if err == http.ErrNoCookie {
		return "", false
	}
	return cookie.Value, true
}

func __gin_get_parameter(c *gin.Context, in string, parameterName string) ([]string, bool, error) {
	if in == "cookie" {
		data, existed := ginGetCookie(c, parameterName)
		return []string{data}, existed, nil
	} else if in == "header" {
		data := c.Request.Header.Get(parameterName)
		return []string{data}, len(data) != 0, nil
	} else if in == "path" {
		data, existed := c.Params.Get(parameterName)
		return []string{data}, existed, nil
	} else if in == "query" {
		data, existed := c.Request.URL.Query()[parameterName]
		return data, existed, nil
	} else if in == "body" {
		data, existed := c.GetPostFormArray(parameterName)
		if existed == false && c.Request.MultipartForm != nil && c.Request.MultipartForm.File != nil {
			fhs, ok := c.Request.MultipartForm.File[parameterName]
			if !ok {
				return []string{}, ok, nil
			}

			return []string{fhs[0].Filename}, ok, nil
		}

		return data, existed, nil
	}

	return []string{}, false, fmt.Errorf("Unsupported 'in': %v", in)
}

type PriceMonitorService interface {
	// GET /v1/monitor/:monitorId
	GetMonitor(in GetMonitorRequest, c *gin.Context)
	// POST /v1/monitor/:monitorId
	StartMonitor(in StartMonitorRequest, c *gin.Context)

	// Service methods
	ProcessMakeRequestErrors(c *gin.Context, errors []FieldError)
	ProcessValidateErrors(c *gin.Context, errors []FieldError)
}

type PriceMonitorServiceServer struct {
	Srv PriceMonitorService
}

// _PriceMonitorService_GetMonitor_Handler

type GetMonitorRequest struct {
	Path GetMonitorRequestPath `json:"Path"`
}

type GetMonitorRequestPath struct {
	MonitorID string `json:"monitorId"`
}

func (server PriceMonitorServiceServer) _PriceMonitorService_GetMonitor_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "GetMonitor")

	var req GetMonitorRequest
	dataPathMonitorID, _, err := __gin_get_parameter(c, "path", "monitorId")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.MonitorID, err = stringConverter(dataPathMonitorID)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}

	server.Srv.GetMonitor(req, c)
}

// _PriceMonitorService_StartMonitor_Handler

type StartMonitorRequest struct {
	Body StartMonitorRequestBody `json:"Body"`
	Path StartMonitorRequestPath `json:"Path"`
}

type StartMonitorRequestBody struct {
	JSON MonitorTask `json:"JSON"`
	Type ContentType `json:"Type"`
}

type StartMonitorRequestPath struct {
	MonitorID string `json:"monitorId"`
}

func (server PriceMonitorServiceServer) _PriceMonitorService_StartMonitor_Handler(c *gin.Context) {
	c.Set(handlerNameKey, "StartMonitor")

	var req StartMonitorRequest
	dataPathMonitorID, _, err := __gin_get_parameter(c, "path", "monitorId")
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}
	req.Path.MonitorID, err = stringConverter(dataPathMonitorID)
	if err != nil {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InPath, "-", "", err)})
		return
	}

	contentType := c.Request.Header.Get("Content-Type")

	if contentType == "" {
		server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "unsupported Content-type", nil)})
		return
	}
	contentType = strings.Split(contentType, ";")[0]

	//TODO: refactor
	switch contentType {

	case "application/json":
		if err := json.NewDecoder(c.Request.Body).Decode(&req.Body.JSON); err != nil {
			server.Srv.ProcessMakeRequestErrors(c, []FieldError{NewFieldError(InBody, "-", "can't decode body from JSON", err)})
			return
		}
	}
	server.Srv.StartMonitor(req, c)
}

// Router
func RegisterRoutes(r *gin.Engine, api PriceMonitorService) {
	e := &PriceMonitorServiceServer{api}

	r.Handle("GET", "/v1/monitor/:monitorId", e._PriceMonitorService_GetMonitor_Handler)
	r.Handle("POST", "/v1/monitor/:monitorId", e._PriceMonitorService_StartMonitor_Handler)
}

type HandlerRegister func(operationID, httpMethod, relativePath string, handler gin.HandlerFunc)

// CustomRouter
func RegisterRoutesCustom(handlerRegister HandlerRegister, api PriceMonitorService) {
	e := &PriceMonitorServiceServer{api}

	handlerRegister("GetMonitor", "GET", "/v1/monitor/:monitorId", e._PriceMonitorService_GetMonitor_Handler)
	handlerRegister("StartMonitor", "POST", "/v1/monitor/:monitorId", e._PriceMonitorService_StartMonitor_Handler)
}

type MonitorResultsItem struct {
}

type MonitorTask struct {
	Frequency string    `json:"frequency"`
	Start     time.Time `json:"start"`
	Stop      time.Time `json:"stop"`
	Target    string    `json:"target"`
}
